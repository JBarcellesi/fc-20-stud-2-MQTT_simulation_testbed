---
- hosts: localhost
  gather_facts: False
  vars:
    public_network_name: public
    private_network_name: private
    private_subnet_name: "{{ private_network_name }}-subnet"
    router_name: "router1"
    webserver_name: "web-server"
    webserver_ip: "10.0.0.100"
    mqttbroker1_name: "mqtt-broker-1"
    mqttbroker1_ip: "10.0.0.101"
    mqttbroker2_name: "mqtt-broker-2"
    mqttbroker2_ip: "10.0.0.102"
    loadbalancer_name: "load-balancer"
    loadbalancer_ip: "10.0.0.105"
    database_name: "database"
    database_ip: "10.0.0.110"
  tasks:
  - name: Authenticate as project admin
    os_auth:
      cloud: project_admin

  # key pair
  - name: Create a key pair with Ubuntu user "eval"
    os_keypair:
      cloud: project_admin
      state: present
      name: eval
      public_key_file: /home/eval/.ssh/id_rsa.pub

  # network
  - name: Create private network "{{ private_network_name }}"
    os_network:
      cloud: project_admin
      state: present
      name: "{{ private_network_name }}"
  - name: Create subnet "{{ private_subnet_name }}" on network "{{ private_network_name }}"
    os_subnet:
      cloud: project_admin
      state: present
      network_name: "{{ private_network_name }}"
      name: "{{ private_subnet_name }}"
      cidr: 10.0.0.0/24
      dns_nameservers:
       - 1.1.1.1
       - 1.0.0.1

  # router
  - name: Create router "{{ router_name }}" attached to external network "{{ public_network_name }}" and internal subnet "{{ private_subnet_name }}"
    os_router:
      cloud: project_admin
      state: present
      name: "{{ router_name }}"
      network: "{{ public_network_name }}"
      interfaces:
        - "{{ private_subnet_name }}"

  # security groups and rules
  - name: Create security group "ping-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: ping-in
      description: Allow ICMP in ingress
  - name: Create security group rule for ICMP in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: ping-in
      protocol: icmp
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group "ssh-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: ssh-in
      description: Allow SSH in ingress
  - name: Create security group rule for SSH in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: ssh-in
      protocol: tcp
      port_range_min: 22
      port_range_max: 22
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group "web-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: web-in
      description: Allow HTTP and HTTPS in ingress
  - name: Create security group rule for HTTP in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: web-in
      protocol: tcp
      port_range_min: 80
      port_range_max: 80
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group rule for HTTPS in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: web-in
      protocol: tcp
      port_range_min: 443
      port_range_max: 443
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group "mqtt-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: mqtt-in
      description: Allow MQTT in ingress
  - name: Create security group rule for MQTT in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: mqtt-in
      protocol: tcp
      port_range_min: 1883
      port_range_max: 1883
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group rule for MQTT over TLS in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: mqtt-in
      protocol: tcp
      port_range_min: 8883
      port_range_max: 8883
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group rule for MQTT over WebSocket in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: mqtt-in
      protocol: tcp
      port_range_min: 9001
      port_range_max: 9001
      remote_ip_prefix: 0.0.0.0/0

  # ports
  - name: Create port with static IP "{{ webserver_ip }}" for "{{ webserver_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ webserver_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - web-in
      fixed_ips:
        - ip_address: "{{ webserver_ip }}"
  - name: Create port with static IP "{{ mqttbroker1_ip }}" for "{{ mqttbroker1_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ mqttbroker1_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - mqtt-in
      fixed_ips:
        - ip_address: "{{ mqttbroker1_ip }}"
  - name: Create port with static IP "{{ mqttbroker2_ip }}" for "{{ mqttbroker2_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ mqttbroker2_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - mqtt-in
      fixed_ips:
        - ip_address: "{{ mqttbroker2_ip }}"
  - name: Create port with static IP "{{ loadbalancer_ip }}" for "{{ loadbalancer_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ loadbalancer_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - web-in
        - mqtt-in
      fixed_ips:
        - ip_address: "{{ loadbalancer_ip }}"
  - name: Create port with static IP "{{ database_ip }}" for "{{ database_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ database_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
      fixed_ips:
        - ip_address: "{{ database_ip }}"
