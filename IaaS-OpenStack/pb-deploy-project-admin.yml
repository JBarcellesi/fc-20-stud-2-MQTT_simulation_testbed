---
- hosts: localhost
  gather_facts: False
  vars:
    public_network_name: public
    private_network_name: private
    private_subnet_name: "{{ private_network_name }}-subnet"
    router_name: "router1"
    webserver_name: "web-server"
    webserver_fip: 172.24.4.100
    mqttbroker_name: "mqtt-broker"
    mqttbroker_fip: 172.24.4.101
  tasks:
  - name: Authenticate as project admin
    os_auth:
      cloud: project_admin

  # network
  - name: Create private network "{{ private_network_name }}"
    os_network:
      cloud: project_admin
      state: present
      name: "{{ private_network_name }}"
  - name: Create subnet "{{ private_subnet_name }}" on network "{{ private_network_name }}"
    os_subnet:
      cloud: project_admin
      state: present
      network_name: "{{ private_network_name }}"
      name: "{{ private_subnet_name }}"
      cidr: 10.0.0.0/24
      dns_nameservers:
       - 1.1.1.1
       - 1.0.0.1

  # router
  - name: Create router "{{ router_name }}" attached to external network "{{ public_network_name }}" and internal subnet "{{ private_subnet_name }}"
    os_router:
      cloud: project_admin
      state: present
      name: "{{ router_name }}"
      network: "{{ public_network_name }}"
      interfaces:
        - "{{ private_subnet_name }}"

  # key pair
  - name: Create a key pair with Ubuntu user "eval"
    os_keypair:
      cloud: project_admin
      state: present
      name: eval
      public_key_file: /home/eval/.ssh/id_rsa.pub

  # security groups and rules
  - name: Create security group "ping-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: ping-in
      description: Allow ICMP in ingress
  - name: Create security group rule for ICMP in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: ping-in
      protocol: icmp
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group "ssh-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: ssh-in
      description: Allow SSH in ingress
  - name: Create security group rule for SSH in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: ssh-in
      protocol: tcp
      port_range_min: 22
      port_range_max: 22
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group "web-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: web-in
      description: Allow HTTP and HTTPS in ingress
  - name: Create security group rule for HTTP in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: web-in
      protocol: tcp
      port_range_min: 80
      port_range_max: 80
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group rule for HTTPS in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: web-in
      protocol: tcp
      port_range_min: 443
      port_range_max: 443
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group "mqtt-in"
    os_security_group:
      cloud: project_admin
      state: present
      name: mqtt-in
      description: Allow MQTT in ingress
  - name: Create security group rule for MQTT in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: mqtt-in
      protocol: tcp
      port_range_min: 1883
      port_range_max: 1883
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group rule for MQTT over TLS in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: mqtt-in
      protocol: tcp
      port_range_min: 8883
      port_range_max: 8883
      remote_ip_prefix: 0.0.0.0/0
  - name: Create security group rule for MQTT over WebSocket in ingress
    os_security_group_rule:
      cloud: project_admin
      state: present
      security_group: mqtt-in
      protocol: tcp
      port_range_min: 9001
      port_range_max: 9001
      remote_ip_prefix: 0.0.0.0/0

  # web server
  - name: Create instance "{{ webserver_name }}" attached to network "{{ private_network_name }}"
    os_server:
      cloud: project_admin
      state: present
      name: "{{ webserver_name }}"
      image: ubuntu-18.04-minimal
      flavor: ubuntu.micro
      network: "{{ private_network_name }}"
      key_name: eval
      security_groups:
        - ping-in
        - ssh-in
        - web-in
      auto_ip: False
      userdata: |
        {%- raw -%}#!/bin/bash
        apt-get update
        apt-get install -y apache2
        echo "<!doctype html><html lang="en"><head> <meta charset="utf-8"> <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script> <script src="./mqtt.js" type="text/javascript"></script> <title>MQTT Demo</title></head><body> <h1>MQTT is awesome!</h1></body></html>" > /var/www/html/index.html
        echo "const client=new Paho.MQTT.Client("172.24.4.101",Number(9001),"myClientId"+(new Date).getTime()),myTopic="test";client.onConnectionLost=onConnectionLost,client.onMessageArrived=onMessageArrived,client.connect({onSuccess:onConnect});let count=0;function onConnect(){console.log("onConnect"),client.subscribe(myTopic),setInterval(()=>{publish(myTopic,`The count is now ${count++}`)},1e3)}function onConnectionLost(n){0!==n.errorCode&&console.log("onConnectionLost:"+n.errorMessage),client.connect({onSuccess:onConnect})}const publish=(n,e)=>{console.log("desint :",n,"msggg",e);let o=new Paho.MQTT.Message(e);o.destinationName=n,client.send(o)};function onMessageArrived(n){let e=document.createElement("div");e.innerHTML=n.payloadString,document.body.appendChild(e)}" > /var/www/html/mqtt.js
        {% endraw %}
  - name: Assign floating IP "{{ webserver_fip }}" to instance "{{ webserver_name }}"
    os_floating_ip:
      cloud: project_admin
      state: present
      floating_ip_address: "{{ webserver_fip }}"
      server: "{{ webserver_name }}"

  # mqtt broker
  - name: Create instance "{{ mqttbroker_name }}" attached to network "{{ private_network_name }}"
    os_server:
      cloud: project_admin
      state: present
      name: "{{ mqttbroker_name }}"
      image: ubuntu-18.04-minimal
      flavor: ubuntu.micro
      network: "{{ private_network_name }}"
      key_name: eval
      security_groups:
        - ping-in
        - ssh-in
        - mqtt-in
      auto_ip: False
      userdata: |
        {%- raw -%}#!/bin/bash
        apt-get update
        apt-get install -y mosquitto
        echo "listener 9001" >> /etc/mosquitto/mosquitto.conf
        echo "protocol websockets" >> /etc/mosquitto/mosquitto.conf
        service mosquitto restart
        {% endraw %}
  - name: Assign floating IP "{{ mqttbroker_fip }}" to instance "{{ mqttbroker_name }}"
    os_floating_ip:
      cloud: project_admin
      state: present
      floating_ip_address: "{{ mqttbroker_fip }}"
      server: "{{ mqttbroker_name }}"
