---
- hosts: localhost
  gather_facts: False
  vars:
    public_network_name: public
    private_network_name: private
    private_subnet_name: "{{ private_network_name }}-subnet"
    router_name: "router1"
    webserver_name: "web-server"
    webserver_ip: "10.0.0.100"
    mqttbroker1_name: "mqtt-broker-1"
    mqttbroker1_ip: "10.0.0.101"
    mqttbroker2_name: "mqtt-broker-2"
    mqttbroker2_ip: "10.0.0.102"
    mqttbrokers: ["{{ mqttbroker1_name }}","{{ mqttbroker2_name }}"]
    loadbalancer_name: "load-balancer"
    loadbalancer_ip: "10.0.0.105"
    database_name: "database"
    database_ip: "10.0.0.110"
    instances: ["{{ webserver_name }}","{{ mqttbroker1_name }}","{{ mqttbroker2_name }}","{{ loadbalancer_name }}","{{ database_name }}"]
    webserver_fip: 172.24.4.100
    mqttbroker_fip: 172.24.4.101
  tasks:
  - name: Authenticate as project admin
    os_auth:
      cloud: project_admin

  # ports
  - name: Create port with static IP "{{ webserver_ip }}" for "{{ webserver_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ webserver_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - web-in
      fixed_ips:
        - ip_address: "{{ webserver_ip }}"
  - name: Create port with static IP "{{ mqttbroker1_ip }}" for "{{ mqttbroker1_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ mqttbroker1_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - mqtt-in
      fixed_ips:
        - ip_address: "{{ mqttbroker1_ip }}"
  - name: Create port with static IP "{{ mqttbroker2_ip }}" for "{{ mqttbroker2_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ mqttbroker2_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - mqtt-in
      fixed_ips:
        - ip_address: "{{ mqttbroker2_ip }}"
  - name: Create port with static IP "{{ loadbalancer_ip }}" for "{{ loadbalancer_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ loadbalancer_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
        - web-in
        - mqtt-in
      fixed_ips:
        - ip_address: "{{ loadbalancer_ip }}"
  - name: Create port with static IP "{{ database_ip }}" for "{{ database_name }}"
    os_port:
      cloud: project_admin
      state: present
      name: "{{ database_name }}-port"
      network: "{{ private_network_name }}"
      security_groups:
        - ping-in
        - ssh-in
      fixed_ips:
        - ip_address: "{{ database_ip }}"

  # web server
  - name: Create web server
    os_server:
      cloud: project_admin
      state: present
      name: "{{ webserver_name }}"
      image: ubuntu-18.04-minimal
      flavor: ubuntu.micro
      nics: "port-name={{ webserver_name }}-port"
      key_name: eval
      auto_ip: False
      wait: False
      userdata: |
        {%- raw -%}#!/bin/bash
        apt-get update
        apt-get install -y apache2

        echo '<!doctype html>' > /var/www/html/index.html
        echo '<html lang="en">' >> /var/www/html/index.html
        echo '<head>' >> /var/www/html/index.html
        echo '  <meta charset="utf-8">' >> /var/www/html/index.html
        echo '  <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>' >> /var/www/html/index.html
        echo '  <script src="mqtt.js" type="text/javascript"></script>' >> /var/www/html/index.html
        echo '  <title>MQTT Demo</title>' >> /var/www/html/index.html
        echo '</head>' >> /var/www/html/index.html
        echo '<body>' >> /var/www/html/index.html
        echo '  <h1>MQTT is awesome!</h1>' >> /var/www/html/index.html
        echo '</body>' >> /var/www/html/index.html
        echo '</html>' >> /var/www/html/index.html

        echo 'const client = new Paho.MQTT.Client("172.24.4.101", Number(9001), "myClientId" + (new Date).getTime());' > /var/www/html/mqtt.js
        echo 'client.onConnectionLost = onConnectionLost, client.onMessageArrived = onMessageArrived, client.connect({' >> /var/www/html/mqtt.js
        echo '  onSuccess: onConnect' >> /var/www/html/mqtt.js
        echo '});' >> /var/www/html/mqtt.js
        echo 'function onConnect() {' >> /var/www/html/mqtt.js
        echo '  console.log("onConnect"), client.subscribe("#")' >> /var/www/html/mqtt.js
        echo '}' >> /var/www/html/mqtt.js
        echo 'function onConnectionLost(n) {' >> /var/www/html/mqtt.js
        echo '  0 !== n.errorCode && console.log("onConnectionLost:" + n.errorMessage), client.connect({' >> /var/www/html/mqtt.js
        echo '    onSuccess: onConnect' >> /var/www/html/mqtt.js
        echo '  })' >> /var/www/html/mqtt.js
        echo '}' >> /var/www/html/mqtt.js
        echo 'function onMessageArrived(n) {' >> /var/www/html/mqtt.js
        echo '  let e = document.createElement("div");' >> /var/www/html/mqtt.js
        echo '  e.innerHTML = n.payloadString, document.body.appendChild(e)' >> /var/www/html/mqtt.js
        echo '}' >> /var/www/html/mqtt.js
        {% endraw %}

  # mqtt brokers
  - name: Create 2 MQTT brokers
    os_server:
      cloud: project_admin
      state: present
      name: "{{ item }}"
      image: ubuntu-18.04-minimal
      flavor: ubuntu.micro
      nics: "port-name={{ item }}-port"
      key_name: eval
      auto_ip: False
      wait: False
      userdata: |
        {%- raw -%}#!/bin/bash
        apt-get update
        apt-get install -y mosquitto

        echo "listener 1883" >> /etc/mosquitto/mosquitto.conf
        echo "protocol mqtt" >> /etc/mosquitto/mosquitto.conf
        echo "listener 9001" >> /etc/mosquitto/mosquitto.conf
        echo "protocol websockets" >> /etc/mosquitto/mosquitto.conf

        systemctl stop mosquitto
        sleep 3
        systemctl start mosquitto
        {% endraw %}
    loop: "{{ mqttbrokers }}"

  # load balancer
  - name: Create load balancer
    os_server:
      cloud: project_admin
      state: present
      name: "{{ loadbalancer_name }}"
      image: ubuntu-18.04-minimal
      flavor: ubuntu.micro
      nics: "port-name={{ loadbalancer_name }}-port"
      key_name: eval
      auto_ip: False
      wait: False
      userdata: |
        {%- raw -%}#!/bin/bash
        apt-get update
        apt-get install -y haproxy

        echo "frontend stats" >> /etc/haproxy/haproxy.cfg
        echo "   bind *:80" >> /etc/haproxy/haproxy.cfg
        echo "   stats uri /haproxy?stats" >> /etc/haproxy/haproxy.cfg
        echo "listen mqtt" >> /etc/haproxy/haproxy.cfg
        echo "  bind *:1883" >> /etc/haproxy/haproxy.cfg
        echo "  mode tcp" >> /etc/haproxy/haproxy.cfg
        echo "  option tcplog" >> /etc/haproxy/haproxy.cfg
        echo "  balance leastconn" >> /etc/haproxy/haproxy.cfg
        echo "  server mqtt-broker-1 10.0.0.101:1883 check" >> /etc/haproxy/haproxy.cfg
        echo "  server mqtt-broker-2 10.0.0.102:1883 check" >> /etc/haproxy/haproxy.cfg
        echo "listen mqtt_websocket" >> /etc/haproxy/haproxy.cfg
        echo "  bind *:9001" >> /etc/haproxy/haproxy.cfg
        echo "  mode tcp" >> /etc/haproxy/haproxy.cfg
        echo "  option tcplog" >> /etc/haproxy/haproxy.cfg
        echo "  balance leastconn" >> /etc/haproxy/haproxy.cfg
        echo "  server mqtt-broker-1 10.0.0.101:9001 check" >> /etc/haproxy/haproxy.cfg
        echo "  server mqtt-broker-2 10.0.0.102:9001 check" >> /etc/haproxy/haproxy.cfg

        systemctl stop haproxy
        sleep 3
        systemctl start haproxy
        {% endraw %}

  # database
  - name: Create database
    os_server:
      cloud: project_admin
      state: present
      name: "{{ database_name }}"
      image: ubuntu-18.04-minimal
      flavor: ubuntu.micro
      nics: "port-name={{ database_name }}-port"
      key_name: eval
      auto_ip: False
      wait: False
      userdata: |
        {%- raw -%}#!/bin/bash
        apt-get update
        apt-get install -y git python3-pip
        pip3 install paho-mqtt
        {% endraw %}

  # floating ips
  - name: Assign floating IP "{{ webserver_fip }}" to instance "{{ webserver_name }}"
    os_floating_ip:
      cloud: project_admin
      state: present
      floating_ip_address: "{{ webserver_fip }}"
      server: "{{ webserver_name }}"
  - name: Assign floating IP "{{ mqttbroker_fip }}" to instance "{{ loadbalancer_name }}"
    os_floating_ip:
      cloud: project_admin
      state: present
      floating_ip_address: "{{ mqttbroker_fip }}"
      server: "{{ loadbalancer_name }}"
